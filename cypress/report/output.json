{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2024-07-04T18:53:22.992Z",
    "end": "2024-07-04T18:53:43.857Z",
    "duration": 20865
  },
  "results": [
    {
      "uuid": "73d436a8-1268-4ea3-93b1-0ca99196783d",
      "title": "",
      "fullFile": "cypress\\e2e\\fileUploadDownload.cy.js",
      "file": "cypress\\e2e\\fileUploadDownload.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "File Upload Test",
          "fullTitle": "File Upload Test",
          "timedOut": null,
          "duration": 254,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.visit('https://trytestingthis.netlify.app/');\n//załadowanie pliku Wybierz plik z widnowsa\n//albo z projektu \ncy.get('#myfile').attachFile('240059_morze_plaza_lato.jpg');",
          "err": {},
          "uuid": "4a609afa-6ffb-479d-b6c2-c60b26f4f6cd",
          "parentUUID": "73d436a8-1268-4ea3-93b1-0ca99196783d",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "File Download test",
          "fullTitle": "File Download test",
          "timedOut": null,
          "duration": 215,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.downloadFile('https://upload.wikimedia.org/wikipedia/en/a/a9/Example.jpg', 'mydownloads', 'wikipedia.jpg');",
          "err": {},
          "uuid": "e59ff0c8-ee1c-4c1d-be75-4a2a41cd0e6f",
          "parentUUID": "73d436a8-1268-4ea3-93b1-0ca99196783d",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [
        "4a609afa-6ffb-479d-b6c2-c60b26f4f6cd",
        "e59ff0c8-ee1c-4c1d-be75-4a2a41cd0e6f"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 469,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "5b5d65e9-9497-4ef4-9419-d61661fcc155",
      "title": "",
      "fullFile": "cypress\\e2e\\myFirstTest.cy.js",
      "file": "cypress\\e2e\\myFirstTest.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "automationstepbystep site",
          "fullTitle": "automationstepbystep site",
          "timedOut": null,
          "duration": 4395,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.visit('https://www.google.pl/');\ncy.get('#L2AGLb > .QS5gu').click();\n// cy.get('#APjFqb').type(\"Automation Step by Step\").type('{enter}')\n//albo tak jak poniżej lekko srócony zapis\ncy.get('#APjFqb').type(\"Automation Step by Step{enter}\");\n/* cy.get('.className, {timeout:5000}').type('123 {enter}') \n- możemy ustawić większe czekanie ręcznie lub w pliku cypress.config.js dla wszystkich zwiększyć.\nTo ustawienie tutaj ma większy priorytet niż w configu         \nalbo jeszcze tak można \ncy.wiat(2000)\n*/",
          "err": {},
          "uuid": "0b2c6b16-ce14-469d-a498-6efb7a595806",
          "parentUUID": "5b5d65e9-9497-4ef4-9419-d61661fcc155",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [
        "0b2c6b16-ce14-469d-a498-6efb7a595806"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 4395,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "467d374b-4658-4d38-8c72-9d6eb042126a",
      "title": "",
      "fullFile": "cypress\\e2e\\readWriteFiles.cy.js",
      "file": "cypress\\e2e\\readWriteFiles.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Read files using Fixture",
          "fullTitle": "Read files using Fixture",
          "timedOut": null,
          "duration": 69,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "//tutaj szczytujemy plik json który znajduje się w folderze\n//fixture\ncy.fixture('rwfile.json').then(data => {\n  cy.log(data.name);\n  cy.log(data.email);\n  //tutaj sprawdzamy asercją poszczególny element w json    \n  cy.fixture('rwfile').its('name').should('eq', 'Tomasz');\n});\n//pobieramy wartość z jsona dzięki funkcji before\ncy.log(this.testData.name);",
          "err": {},
          "uuid": "0e02ae23-e1bf-46e2-896c-25540ded02e5",
          "parentUUID": "467d374b-4658-4d38-8c72-9d6eb042126a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Read file using readFile() function",
          "fullTitle": "Read file using readFile() function",
          "timedOut": null,
          "duration": 62,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.readFile('.\\\\cypress\\\\fixtures\\\\rwfile.json').then(data => {\n  cy.log(data.name);\n  //asercja implicit  \n  cy.readFile('.\\\\cypress\\\\fixtures\\\\rwfile.json').its('name').should('eq', 'Tomasz');\n});",
          "err": {},
          "uuid": "cd22bd3e-c2b0-421d-960c-bed27a9b27c1",
          "parentUUID": "467d374b-4658-4d38-8c72-9d6eb042126a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Write file",
          "fullTitle": "Write file",
          "timedOut": null,
          "duration": 26,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// \\n przenosi tekst do następnej lini\ncy.writeFile('sample.txt', 'Hello I am Tomasz \\n');\n//ta flaga niżej powoduje, że nie wykasuje się tekst\n//powyżej i będą widoczne obydwa\ncy.writeFile('sample.txt', 'I am lerning Cypress \\n', {\n  flag: 'a+'\n});\n//talk samo można też używać ścieżki zamiast samej\n//nazwy pliku tak samo jak powyżej w readFile\ncy.writeFile('sample.txt', 'Kocham moją córeczkę Anastazje', {\n  flag: 'a+'\n});",
          "err": {},
          "uuid": "81098f13-d691-448a-a846-1191b29e5bab",
          "parentUUID": "467d374b-4658-4d38-8c72-9d6eb042126a",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [
        "0e02ae23-e1bf-46e2-896c-25540ded02e5",
        "cd22bd3e-c2b0-421d-960c-bed27a9b27c1",
        "81098f13-d691-448a-a846-1191b29e5bab"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 157,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "51ac78d0-8799-4ca7-b8d6-c9a82f4c3acd",
      "title": "",
      "fullFile": "cypress\\e2e\\spec.cy.js",
      "file": "cypress\\e2e\\spec.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9434634c-46a6-4823-8576-17c44f0e9536",
          "title": "template spec",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "passes",
              "fullTitle": "template spec passes",
              "timedOut": null,
              "duration": 292,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://example.cypress.io');",
              "err": {},
              "uuid": "6c0fb5b5-950a-4fca-b0ef-b3efbd28b441",
              "parentUUID": "9434634c-46a6-4823-8576-17c44f0e9536",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6c0fb5b5-950a-4fca-b0ef-b3efbd28b441"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 292,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f0eee890-682d-4426-b081-01c48c32881e",
      "title": "",
      "fullFile": "cypress\\e2e\\assertions.cy.js",
      "file": "cypress\\e2e\\assertions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Assertions",
          "fullTitle": "Assertions",
          "timedOut": null,
          "duration": 737,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.visit('https://example.cypress.io');\ncy.contains('get').click();\ncy.get('#query-btn')\n//Assercja Implicit\n//1)should-contain - powinien zawierać tekst\n.should('contain', 'Button')\n//2)should-have - kalsa/id/string itd. powinien mieć dany atrybut\n//have.text,have.html też może być\n.should('have.id', 'query-btn')\n//3)should-be - powinien być\n/*.should('be.visible') \n  .should('be.selected') \n  .should('be.disabled')\n  .should('be.enabled')\n  .should('be.focused') to samo co have.focus \n*/.should('be.visible').should('be.enabled')\n//4)and - łączenie asercji,zamiast używać should \n//to wystarczy raz napisać should a potem and\n.should('contain', 'Button').and('have.id', 'query-btn').and('be.visible').and('be.enabled')\n//5)should-equal - czyli powinno zawierać\n.invoke('attr', 'id').should('equal', 'query-btn');\n//Assertion Explicit\n//1)expect - oczekuje true or false\nexpect(true).to.be.true;\n/* \nMożna używac zmiennych i sprawdzać czy dana wartość się zgadza\nnp.\nlet name = 'cypress'\nexpect(name).to.be.equal('cypress')\ninne wariany\n            .to.not.equal()\n            .to.be.a('string')\n            .to.be.true\n            .to.be.false\n            .to.be.null\n            .to.exist\n*/\n//2)assert np. assert.equal \n//assert.equal(4,5,'NOT EQUAL')\n//czyli czy liczba 4 i 5 nie są równe\n//assert.equal(param,param2,'wiadomość która się wyświetli jeżeli warunek nie zostanie spełniony')\nassert.equal(4, '4', 'NOT EQUAL');\n/*\nróżnica między jednym a drugim jest taka, \nże w equal porównuje inty ze stringiem i nie ma z tym problemu\nale w strictEqual dwa różne typy zawsze dadzą ujemny wynik\nassert.strictEqual(4,'4','NOT EQUAL') - zwróci NOT EQUAL\n*/\nassert.strictEqual(4, 4, 'NOT EQUAL');\n/* \ninne warianty\n      .notEqual - \n      assert.notEqual(actual, expected, message) sprawdza, czy dwie wartości nie są równe (z przekształceniem typów).\n      assert.notEqual(4, '5', 'Values are equal'); // Przejdzie pomyślnie\n      assert.notEqual(4, '4', 'Values are equal'); // Nie przejdzie i wyświetli wiadomość\n      \n      .strictEqual -\n      assert.strictEqual(actual, expected, message) sprawdza, czy dwie wartości są ściśle równe (bez przekształcenia typów).\n      assert.strictEqual(4, 4, 'Values are not strictly equal'); // Przejdzie pomyślnie\n      assert.strictEqual(4, '4', 'Values are not strictly equal'); // Nie przejdzie i wyświetli wiadomość\n        .isAbove -\n      assert.isAbove(valueToCheck, valueToBeAbove, message) sprawdza, czy pierwsza wartość jest większa od drugiej.\n      assert.isAbove(10, 5, 'Value is not above the expected value'); // Przejdzie pomyślnie\n      assert.isAbove(3, 5, 'Value is not above the expected value'); // Nie przejdzie i wyświetli wiadomość\n        .isBelow -\n      assert.isBelow(valueToCheck, valueToBeBelow, message) sprawdza, czy pierwsza wartość jest mniejsza od drugiej.\n      assert.isBelow(3, 5, 'Value is not below the expected value'); // Przejdzie pomyślnie\n      assert.isBelow(10, 5, 'Value is not below the expected value'); // Nie przejdzie i wyświetli wiadomość\n        .exists - \n      assert.exists(value, message) sprawdza, czy wartość nie jest null ani undefined.\n      assert.exists('Hello', 'Value does not exist'); // Przejdzie pomyślnie\n      assert.exists(null, 'Value does not exist'); // Nie przejdzie i wyświetli wiadomość\n        .notExists - \n      assert.notExists(value, message) sprawdza, czy wartość jest null lub undefined.\n      assert.notExists(null, 'Value exists'); // Przejdzie pomyślnie\n      assert.notExists('Hello', 'Value exists'); // Nie przejdzie i wyświetli wiadomość\n        .istrue - \n      assert.isTrue(value, message) sprawdza, czy wartość jest true.\n      assert.isTrue(true, 'Value is not true'); // Przejdzie pomyślnie\n      assert.isTrue(false, 'Value is not true'); // Nie przejdzie i wyświetli wiadomość\n        .isfalse - \n      assert.isFalse(value, message) sprawdza, czy wartość jest false.\n      assert.isFalse(false, 'Value is not false'); // Przejdzie pomyślnie\n      assert.isFalse(true, 'Value is not false'); // Nie przejdzie i wyświetli wiadomość\n        .isString - \n      assert.isString(value, message) sprawdza, czy wartość jest typu string.\n      assert.isString('Hello', 'Value is not a string'); // Przejdzie pomyślnie\n      assert.isString(123, 'Value is not a string'); // Nie przejdzie i wyświetli wiadomość\n        .isNotString - \n      assert.isNotString(value, message) sprawdza, czy wartość nie jest typu string.\n      assert.isNotString(123, 'Value is a string'); // Przejdzie pomyślnie\n      assert.isNotString('Hello', 'Value is a string'); // Nie przejdzie i wyświetli wiadomość\n        .isNumber - \n      assert.isNumber(value, message) sprawdza, czy wartość jest typu number.\n      assert.isNumber(123, 'Value is not a number'); // Przejdzie pomyślnie\n      assert.isNumber('Hello', 'Value is not a number'); // Nie przejdzie i wyświetli wiadomość\n        .isNotNumber - \n      assert.isNotNumber(value, message) sprawdza, czy wartość nie jest typu number.\n      assert.isNotNumber('Hello', 'Value is a number'); // Przejdzie pomyślnie\n      assert.isNotNumber(123, 'Value is a number'); // Nie przejdzie i wyświetli wiadomość\n  */",
          "err": {},
          "uuid": "3c0ac47b-0c76-4778-a835-55ae38a99948",
          "parentUUID": "f0eee890-682d-4426-b081-01c48c32881e",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [
        "3c0ac47b-0c76-4778-a835-55ae38a99948"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 737,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/report/mochawesome-report"
      },
      "version": "6.2.0"
    }
  }
}